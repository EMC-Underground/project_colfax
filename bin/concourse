generate_keys() {
    printf "${cyan}Generating Concourse Keys.... "
    bash /tmp/concourse-docker/keys/generate > /dev/null 2>&1
    success
}

deploy_concourse() {
    printf "${cyan}Deploying Concourse.... "
    export STORAGE_DRIVER=overlay
    cd /tmp/concourse-docker
    docker-compose up -d > /dev/null 2>&1
    success
    cd - > /dev/null 2>&1
}

pipeline_build_out() {
    for (( i=0; i<${#jobs[@]}; i++ ))
    do
        local job_name=`echo ${jobs[$i]} | jq -r .job_name`
        local repo_url=`echo ${jobs[$i]} | jq -r .repo_url`
        local repo_branch=`echo ${jobs[$i]} | jq -r .repo_branch`
        local resource="  - name: ${job_name}_repo
    type: git
    source:
      uri: ${repo_url}
      branch: ${repo_branch}"
        [[ $ssh_repos -eq 0 ]] && resource="${resource}
      private_key: |
              ((ssh_key))"
        local job="  - name: ${job_name}_job
    public: true
    serial: true
    plan:"
        if [ $i -gt 0 ]
        then
            job="${job}
      - get: timestamp
        trigger: true
        passed: [ $(echo ${jobs[$i-1]} | jq -r .job_name)_job ]"
        fi
        job="${job}
      - get: ${job_name}_repo
      - task: deploy_${job_name}
        file: ${job_name}_repo/task/task.yml"
        if [[ $i -lt $((${#jobs[@]}-1)) ]]
        then
            job="${job}
      - put: timestamp"
        fi
        echo -e "${resource}\n$(cat /tmp/pipeline.yml)" > /tmp/pipeline.yml
        echo -e "${job}\n" >> /tmp/pipeline.yml
    done
    }

add_job() {
    local job_name=$1 repo_url=$2 repo_branch=$3
    local value="{\"job_name\":\"${job_name}\",\"repo_url\":\"${repo_url}\",\"repo_branch\":\"${repo_branch}\"}"
    jobs=( "${jobs[@]}" $value )
}


build_pipeline() {
    jobs=()
    printf "${cyan}Creating pipeline definition.... ${reset}"
    echo -e "jobs:" > /tmp/pipeline.yml
    read_config
    pipeline_build_out
    echo -e "  - name: timestamp
    type: time
    source:
      location: America/Los_Angeles
      start: 12:00 AM
      stop: 12:00 AM\n$(cat /tmp/pipeline.yml)" > /tmp/pipeline.yml
    echo -e "resources:\n$(cat /tmp/pipeline.yml)" > /tmp/pipeline.yml
    echo -e "---\n$(cat /tmp/pipeline.yml)" > /tmp/pipeline.yml
    [ -f /tmp/pipeline.yml ]
    success
}

concourse_login() {
    printf "${cyan}Logging in to concourse.... "
    sleep 4
    local i=0
    local o=0
    while [[ $i -lt 1 ]]
    do
        fly --target main login --concourse-url=http://localhost:8080 -u test -p test > /dev/null 2>&1
        if [ $? -eq 0 ]
        then
            success
            sleep 1
            i=$((i+1))
        else
            o=$((o+1))
            if [ $o -eq 5 ]
            then
                success
                i=$((i+1))
            fi
            sleep 2
        fi
    done
}

fly_sync() {
    printf "${cyan}Syncing the fly cli.... ${reset}"
    fly --target main sync > /dev/null 2>&1
    success
}

set_swarm_pipeline() {
    printf "${cyan}Creating build pipeline.... ${reset}"
    fly --target main set-pipeline -p build -c /tmp/pipeline.yml -n > /dev/null
    success
    printf "${cyan}Unpausing the build pipeline.... ${reset}"
    fly --target main unpause-pipeline -p build > /dev/null
    success
    printf "${cyan}Exposing the build pipeline.... ${reset}"
    fly --target main expose-pipeline -p build > /dev/null
    success
    printf "${cyan}Triggering the build-swarm job.... ${reset}"
    fly --target main trigger-job --job=build/"$(echo ${jobs[0]} | jq -r .job_name)_job" > /dev/null
    success
}

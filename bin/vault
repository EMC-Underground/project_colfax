build_deploy_vault() {
    printf "${cyan}Deploying Vault.... "
    cd ${temp_location}/vault-consul-docker
    docker-compose up -d --build > /dev/null 2>&1
    success
    cd - > /dev/null 2>&1
}

vault_vxflex_secrets() {
    local vars=( "gateway_ip" "gateway_port" "system_name" "protection_domain" "storage_pool" "username" "password" )
    local i=0
    while [[ $i -lt ${#vars[@]} ]]
    do
        local secret_key="vxflex_${vars[$i]}"
        eval secret_value=\$$secret_key
        create_vault_secret "concourse/main/" $secret_key $secret_value
        i=$((i+1))
    done
}

vault_nfs_secrets() {
    local vars=( "nfs_server" "nfs_share" )
    local i=0
    while [[ $i -lt ${#vars[@]} ]]
    do
        local secret_key="${vars[$i]}"
        eval secret_value=\$$secret_key
        create_vault_secret "concourse/main/" $secret_key $secret_value
        i=$((i+1))
    done
}

vault_init() {
    printf "${cyan}Initializing Vault.... "
    local  __resultvar=$1
    local i=0
    local o=0
    while [[ $i -lt 1 ]]
    do
        vault operator init -address=http://localhost:8200 -status > /dev/null 2>&1
        if [[ $? -eq 2 || $? -eq 0 ]]
        then
            i=$((i+1))
        else
            if [ $o -eq 4 ]
            then
                success
                i=$((i+1))
            else
                o=$((o+1))
                sleep 2
            fi
        fi
    done
    local result=`vault operator init -address=http://localhost:8200 -key-threshold=1 -key-shares=1 -format=json`
    success
    eval $__resultvar="'$result'"
}

vault_unseal() {
    local root_token=$1
    printf "${cyan}Unsealing the vault.... ${reset}"
    vault operator unseal -address=http://localhost:8200 $root_token > /dev/null 2>&1
    success
}

vault_create_store() {
    printf "${cyan}Creating vault secret store.... ${reset}"
    vault secrets enable -address=http://localhost:8200 -version=1 -path=concourse kv > /dev/null 2>&1
    success
}

vault_create_policy() {
    printf "${cyan}Create vault policy.... ${reset}"
    echo 'path "concourse/*" {
  policy = "read"
}' > ${temp_location}/concourse-policy.hcl
    vault policy write -address=http://localhost:8200 concourse ${temp_location}/concourse-policy.hcl > /dev/null 2>&1
    success
}

vault_create_token() {
    printf "${cyan}Create vault service account.... "
    local __resultvar=$1
    local result=`vault token create -address=http://localhost:8200 -display-name=concourse -format=json --policy concourse | jq -r .auth.client_token`
    success
    eval $__resultvar="'$result'"
}

vault_login() {
    local root_token=$1
    printf "${cyan}Logging into Vault.... "
    local i=0
    local o=0
    while [[ $i -lt 1 ]]
    do
        local ha_mode=`vault status -address=http://localhost:8200 | grep "HA Mode" | awk '{print $3}'`
        if [ $ha_mode == "active" ]
        then
            i=$((i+1))
        else
            if [ $o -eq 4 ]
            then
                success
            else
                o=$((o+1))
                sleep 2
            fi
        fi
    done
    vault login -address=http://localhost:8200 $root_token > /dev/null
    success
}

create_vault_secret() {
    local team=$1 pipeline=$2 secret=$3
    printf "${cyan}Creating ${2} vault secret.... "
    echo -n "$secret" | vault kv put -address=http://localhost:8200 $team$pipeline value=- > /dev/null
    success
}

capture_num_servers() {
    local __resultvar=$1
    local result=""
    until [ $((result%2)) -ne 0 ]
    do
        printf "${magenta}How many servers will you use (odd numbers only): ${reset}"
        read result
    done
    eval $__resultvar="'$result'"
}

input_server_ips() {
    printf "${magenta}Enter server IP addresses\n"
    local i=0
    while [[ $i -lt $2 ]]
    do
        printf "${magenta}Server[${i}]: ${reset}"
        read ip$i
        eval p="\$ip${i}"
        validate_ip $p && server_list[$i]=$p && i=$((i+1)) && continue
    done
}

validate_ip() {
    local server=$1
    [[ " ${server_list[@]} " =~ " ${server} " ]] && echo "${red}Please enter unique IP's${reset}" && return 1
    valid_ip $server
    [ $? -ne 0 ] && echo "${red}Please enter valid IP's${reset}" && return 1
    return 0
}

capture_password() {
    local result=""
    printf "${magenta}Enter password (Password#1): ${reset}"
    local __resultvar=$1
    read -s result
    if [ "$result" == "" ]; then result="Password#1"; fi
    echo ""
    eval $__resultvar="'$result'"
}

function valid_ip() {
    local  ip=$1
    local  stat=1
    if [[ $ip =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
        OIFS=$IFS
        IFS='.'
        ip=($ip)
        IFS=$OIFS
        [[ ${ip[0]} -le 255 && ${ip[1]} -le 255 \
            && ${ip[2]} -le 255 && ${ip[3]} -le 255 ]]
        stat=$?
    fi
    return $stat
}

function join_by { local IFS="$1"; shift; echo "$*"; }

capture_pipeline_review() {
    local result=""
    printf "${magenta}Review Pipeline Jobs (y/N)? ${reset}"
    read result

}

capture_persistence_driver() {
    local result=""
    local __resultvar=$1
    until [ "$result" = "nfs" ] || [ "$result" = "vxflex" ]
    do
        printf "${magenta}Which persistence driver should we use (nfs/vxflex)? ${reset}"
        read result
    done
    eval $__resultvar="'$result'"
}

capture_nfs_server() {
    local result=""
    local __resultvar=$1
    while [ "$result" = "" ]
    do
        printf "${magenta}NFS Server: ${reset}"
        read result
    done
    eval $__resultvar="'$result'"
}

capture_nfs_share() {
    local result=""
    local __resultvar=$1
    while [ "$result" = "" ]
    do
        printf "${magenta}NFS Share: ${reset}"
        read result
    done
    eval $__resultvar="'$result'"
}

capture_the_data() {
    local result="" __resultvar=$1 vardefault=$2
    local __resultvar=$1
    printf "${magenta}${__resultvar//_/ } (${vardefault}): ${reset}"
    read result
    if [ "$result" = "" ]; then result="${vardefault}"; fi
    eval $__resultvar="'$result'"
}
